#!/usr/bin/env node
const program = require('commander')
const ora = require("ora");
const symbol = require('log-symbols')
const chalk = require('chalk')
const utils = require('./util');
const { updateJsonFile, loadCmd } = utils;

program
    .usage('<template-name> <project-name>')

// 帮助信息
program.on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.blue('    # create a new project with a template'))
    console.log(chalk.yellow('    $ ysc init <template-name> <project-name>'))
    console.log()
})

let init = async (username, token)=>{

    try {
        await loadCmd(`git init`,'git初始化');
        console.log(symbol.warning, username , token);
        if(!username || !token) {
            console.log(symbol.warning, chalk.yellow('缺少参数无法创建远程仓库'));
            console.log(symbol.warning, chalk.yellow('参考 ysc init <template-name> <project-name>'));
            process.exit(1);
        }else {
            const projectName = process.cwd().split('\\').slice(-1)[0];

            await loadCmd(`curl -u ${username}:${token} https://api.github.com/user/repos -d "{\"name\": \"${projectName}\"}"`, 'Github仓库创建');
            // curl -u qjk-xiaoqi:a97fc56cbefe4bdc092490067bb1a9727615a583 https://api.github.com/user/repos -d "{\"name\": \"auto\"}"
            await loadCmd(`git remote add origin https://github.com/${username}/${projectName}.git`, '关联远端仓库')
            let loading = ora();
            loading.start(`package.json更新repository：命令执行中...`);
            await updateJsonFile('package.json', {
                "repository": {
                    "type": "git",
                    "url": `https://github.com/${username}/${projectName}.git`
                }
            }).then(() => {
                loading.succeed(`package.json更新repository: 命令执行完成`);
            });
            await loadCmd(`git add .`,"执行 git add");
            await loadCmd(`git commit -a -m "init"`, '执行git commit')
            await loadCmd(`git push --set-upstream origin master`, '执行git push')
        }
        await loadCmd(`npm install`,"安装依赖");
    }catch(err) {
        console.log(symbol.error, chalk.red('初始化失败'));
        console.log(symbol.error, chalk.red(err));
        process.exit(1);
    }

}

program.parse(process.argv)

let username = program.args[0];
// 项目名
const token = program.args[1];
init(username, token).then(()=>{});
